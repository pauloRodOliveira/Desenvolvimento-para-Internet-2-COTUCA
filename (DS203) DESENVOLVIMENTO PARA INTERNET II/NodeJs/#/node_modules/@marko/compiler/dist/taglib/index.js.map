{"version":3,"sources":["../../src/taglib/index.js"],"names":["excludeDir","finder","excludePackage","registeredTaglibs","loadedTranslatorsTaglibs","Map","lookupCache","Object","create","register","require","resolve","buildLookup","dirname","requestedTranslator","translator","Array","isArray","taglibs","Error","has","set","map","id","props","loadTaglib","taglibsForDir","find","concat","get","cacheKey","it","join","lookup","Lookup","i","length","taglib","addTaglib","imports","importedTaglib","hasTaglib","push","clearCaches","loader","clearCache","_loader","_finder","loadTaglibFromProps","createTaglib"],"mappings":"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","sourcesContent":["import loader from \"./loader\";\nimport finder from \"./finder\";\nimport Lookup from \"./lookup\";\nimport tryLoadTranslator from \"../util/try-load-translator\";\n\nexport const excludeDir = finder.excludeDir;\nexport const excludePackage = finder.excludePackage;\n\nconst registeredTaglibs = [];\nconst loadedTranslatorsTaglibs = new Map();\nlet lookupCache = Object.create(null);\n\nregister(require.resolve(\"./marko-html.json\"), require(\"./marko-html.json\"));\nregister(require.resolve(\"./marko-svg.json\"), require(\"./marko-svg.json\"));\nregister(require.resolve(\"./marko-math.json\"), require(\"./marko-math.json\"));\n\nexport function buildLookup(dirname, requestedTranslator) {\n  const translator = tryLoadTranslator(requestedTranslator);\n  if (!translator || !Array.isArray(translator.taglibs)) {\n    throw new Error(\n      \"@marko/compiler: Invalid translator provided to buildLookup(dir, translator)\"\n    );\n  }\n\n  if (!loadedTranslatorsTaglibs.has(translator)) {\n    loadedTranslatorsTaglibs.set(\n      translator,\n      translator.taglibs.map(([id, props]) => loadTaglib(id, props))\n    );\n  }\n\n  const taglibsForDir = finder.find(\n    dirname,\n    registeredTaglibs.concat(loadedTranslatorsTaglibs.get(translator))\n  );\n\n  const cacheKey = taglibsForDir.map(it => it.id).join();\n  let lookup = lookupCache[cacheKey];\n\n  if (!lookup) {\n    lookup = lookupCache[cacheKey] = new Lookup();\n    for (let i = taglibsForDir.length; i--; ) {\n      const taglib = taglibsForDir[i];\n      lookup.addTaglib(taglib);\n      if (taglib.imports) {\n        for (const importedTaglib of taglib.imports) {\n          if (!lookup.hasTaglib(importedTaglib)) {\n            lookup.addTaglib(importedTaglib);\n          }\n        }\n      }\n    }\n  }\n\n  return lookup;\n}\n\nexport function register(id, props) {\n  registeredTaglibs.push(loadTaglib(id, props));\n}\n\nexport function clearCaches() {\n  loader.clearCache();\n  finder.clearCache();\n  lookupCache = Object.create(null);\n}\n\n// Used by legacy compiler api.\nexport const _loader = loader;\nexport const _finder = finder;\n\nfunction loadTaglib(id, props) {\n  return loader.loadTaglibFromProps(loader.createTaglib(id), props);\n}\n"],"file":"index.js"}